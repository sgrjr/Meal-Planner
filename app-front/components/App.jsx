/*
******************
Form Component
******************
*/

var RecipeForm = React.createClass({
	
	getInitialState: function() {
		return {
			id:1,
			title:'',
			imageURL:'',
			remoteURL:'',
			servings:{yield:0, size:'1 wrap'},
			nutrition:[],
			ingredients:[],
			preparation:[],
			note:''
			};
	},
	
	loadRecipeFromServer: function(recipeId) {
		
		var url = 'api/v1/recipe/'+recipeId;
		
		$.ajax({
		  url: url,
		  dataType: 'json',
		  cache: false,
		  success: function(data) {
			this.setState(data.recipe);
		  }.bind(this),
		  error: function(xhr, status, err) {
			console.error(url, status, err.toString());
		  }.bind(this)
		});
		
	  },
	
	  componentDidMount: function() {
		this.loadRecipeFromServer(this.state.id);
	  },
	
	handleChange: function(e) {
		var dataName = e.target.attributes['name'].value;
		this.setState(this.state[dataName]= e.target.value);
	},
	
	handleSubmit: function(e) {
		e.preventDefault();
		
		var id = this.state.id.trim();
		var title = this.state.title.trim();
		console.log(id);

		if (!id || !titlle) {
		  return;
		}
		
		this.handleRecipeSubmit({id: id, title: title});
		//this.setState({id: '', title: ''});
  },
  
  	handleRecipeSubmit: function(recipe) {
		
		var url = "recipe/"+recipe['id']+"/edit";
			
		$.ajax({
		  url: url,
		  dataType: 'json',
		  type: 'POST',
		  data: recipe,
		  success: function(data) {
			this.setState(data);
		  }.bind(this),
		  error: function(xhr, status, err) {
			console.error(url, status, err.toString());
		  }.bind(this)
		});
	  },
  
  render: function() {
    return (<div>
		<hr /><hr /><hr /><hr /><hr /><hr /><hr />
			<form style={{clear:'both'}} className="commentForm" onSubmit={this.handleRecipeSubmit} >
				<input
				  type="text"
				  placeholder="id"
				  value={this.state.id}
				  onChange={this.handleChange}
				  name="id"
				/>
				<input
				  type="text"
				  placeholder="title"
				  value={this.state.title}
				  onChange={this.handleChange}
				   name="title"
				/>
				<textarea
				  type="text"
				  placeholder="image"
				  value={this.state.imageURL}
				  onChange={this.handleChange}
				   name="imageURL"
				></textarea>		  	
				<textarea
				  type="text"
				  placeholder="URL"
				  value={this.state.remoteURL}
				  onChange={this.handleChange}
				   name="remoteURL"
				></textarea>
				
				<input type="submit" value="save" />
			  
			  </form>
		  
		  </div>
    );
  }
});
/*
******************
commenting System
******************
*/

var CommentList = React.createClass({
  render: function() {
	 
	var commentNodes = this.props.data.map(function(comment) {
		  return (
			<Comment author={comment.author} key={comment.id}>
			  {comment.text}
			</Comment>
		  );
		});

    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});

// tutorial15.js
var CommentForm = React.createClass({
	
	getInitialState: function() {
    return {author: '', text: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
	 handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    this.props.onCommentSubmit({author: author, text: text});
    this.setState({author: '', text: ''});
  },
  
  render: function() {
    return (
		<form className="commentForm" onSubmit={this.handleSubmit}>
			<input
			  type="text"
			  placeholder="Your name"
			  value={this.state.author}
			  onChange={this.handleAuthorChange}
			/>
			<input
			  type="text"
			  placeholder="Say something..."
			  value={this.state.text}
			  onChange={this.handleTextChange}
			/>
			<input type="submit" value="Post" />
		  </form>
    );
  }
});

var CommentBox = React.createClass({
	
	  loadCommentsFromServer: function() {
		$.ajax({
		  url: this.props.url,
		  dataType: 'json',
		  cache: false,
		  success: function(data) {
			this.setState({data: data.comments});
		  }.bind(this),
		  error: function(xhr, status, err) {
			console.error(this.props.url, status, err.toString());
		  }.bind(this)
		});
	  },
	
	getInitialState: function() {
		return {
		  data: []
		};
	  },
	
	  componentDidMount: function() {
		this.loadCommentsFromServer();
		setInterval(this.loadCommentsFromServer, this.props.pollInterval);
	  },
	handleCommentSubmit: function(comment) {
		
		 var comments = this.state.data;
		// Optimistically set an id on the new comment. It will be replaced by an
		// id generated by the server. In a production application you would likely
		// not use Date.now() for this and would have a more robust system in place.
		comment.id = Date.now();
		var newComments = comments.concat([comment]);
		this.setState({data: newComments});
			
		$.ajax({
		  url: this.props.url,
		  dataType: 'json',
		  type: 'POST',
		  data: comment,
		  success: function(data) {
			this.setState({data: data});
		  }.bind(this),
		  error: function(xhr, status, err) {
			this.setState({data: comments});
			console.error(this.props.url, status, err.toString());
		  }.bind(this)
		});
	  },
	  
  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
       <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});

var Comment = React.createClass({
	
	rawMarkup: function() {
		var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
		return { __html: rawMarkup };
	  },

	
  render: function() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

var AdvertiseRecipe = React.createClass({
	
  render: function() {
	 
    return (
		<div  className="image" >
			<a href={"#"+this.props.meal.id} >
			  <img onClick={this.props.clickHandler} data={JSON.stringify(this.props.meal)} src={ this.props.meal.imageURL } id={this.props.meal.id}/>
			</a>
			<h2><span><a href={this.props.meal.remoteURL}>{this.props.meal.title}</a></span></h2>		
			
		</div>
    );
  }
});

var DetailRecipe = React.createClass({
	
	detailSecondaryStyle: {
		color:"black",
		display:"block",
		backgroundColor:"white",
		margin:"20px"
	},
	detailLeftStyle: {
		width:"50%",
		display:"block",
		backgroundColor:"white",
		zIndex:"201",
		float:"left"
	},
	detailRightStyle: {
		width:"50%",
		display:"block",
		backgroundColor:"white",
		display:"block",
		top:-1000,
		float:"left"
	},
	commentBoxStyle: {

	},
	
  render: function() {
	  
    return (
      <div>
		<div style={this.detailLeftStyle} >
			<div className="image">
				  <img onClick={this.props.clickHandler} data={JSON.stringify(this.props.meal)} src={ this.props.meal.imageURL } id={this.props.meal.id}/>
				  <h2><span><a href={this.props.meal.remoteURL}>{this.props.meal.title}</a></span></h2>
			</div>					
		</div>
		<div style={this.detailRightStyle} >
			<div id={"detail" + this.props.meal.id} style={this.detailSecondaryStyle} >
				<h3>Ingredients</h3>
					<ul>{this.props.functionList(this.props.meal.ingredients)}</ul>
				<h3>Preparation</h3>
					<ul>{this.props.functionList(this.props.meal.preparation)}</ul>
				<h3>Nutrition</h3>
				<p>(Yields: {this.props.meal.servings.yield} serving(s); 1 serving = {this.props.meal.servings.size})</p>
				<ol>
				
					{
					this.props.meal.nutrition.map(function(n) {			
						return 	<NutritionValue kind={n.id} amount={n.amount} key={n.id}/>;
					})}

				</ol>
				<p>{this.props.meal.note}</p>
				
				<CommentBox style={this.commentBoxStyle} url={"api/v1/meal/" + this.props.meal.id + "/comments" } pollInterval={2000} />
				
			</div>
			
		</div>
      </div>
    );
  }
});

var MiniNutrient = React.createClass({
	
	getInitialState: function() {
		return {
		  liked: false
		};
	  },
	styleMain: {
		zIndex:400
	},
	styleHead: {
		color:"red"
	},
	styleMore: {
		display:"none"
	},
	
	handleClick: function(event) {
		this.setState({liked: !this.state.liked});
		this.toggler(this.state.liked);
	  },
	  
	  toggler: function(state) {

		if(state){
			this.styleMain.position = "relative";
			this.styleMain.width = "auto";
			this.styleMore.display = "none";	
			this.styleMain.backgroundColor = "transparent";			
		}else{
			this.styleMain.position = "fixed";
			this.styleMain.top = 0;
			this.styleMain.right = 0;
			this.styleMain.backgroundColor = "gray";
			this.styleMain.width = "200px";
			this.styleMore.display = "block";				
		}
	
  },
	  
	
  render: function() {
	
	var obj = this.props.data;
	
	if(!obj){
		obj = {};
	}

	var newArray = [];
	var i = 0;
	
	for (var prop in obj) {
		
	  if( obj.hasOwnProperty( prop ) ) {
		
		var entry = [prop,obj[prop]];
		
		newArray[i] = entry;
		i++;
		
	  } 
	}
	var mainStyle = {};
	var mainStyle1 = this.styleHead;	
	var mainStyle2 = this.styleMore;	
	var ctr = 0;
	
    return (
      <ul style={this.styleMain} onClick={this.handleClick}>
		
		{
			newArray.map(function(i) {
				
				var id = i[0];
				var amount = i[1];
				
				if(ctr <= 0){
					mainStyle = mainStyle1;
				}else{
					mainStyle = mainStyle2;
				}
				ctr = ctr+1;

				return 	<li style={mainStyle} key={ctr}>{id}: {amount}</li>;
							
			})
		}
	  
      </ul>
    );
  }
});

/*
***************************************
*/

var RecipeItem = React.createClass({
	
	getInitialState: function() {
		return {
		  liked: false
		};
	  },
	
	detailStyle: {
		height:"200px",
		width:"25%",
		overflow:"hidden",
		float:"left",
		zIndex:"100"
	},
	
	handleClick: function(event) {
		this.setState({liked: !this.state.liked});
		this.toggler(this.state.liked);
	  },
	  
	dragStart: function (event) {

		var data = event.target.attributes.data.value;
	
		event.dataTransfer.setData('text', JSON.stringify(data)); 

	  },
	listIt: function(items) {
		
		var list = items.map(function(i){
			return <li key={i}>{i}</li>;
		});
		
		return list;
		
	  },

	  toggler: function(state) {
	

			if(state){
				this.detailStyle.width = "25%";
				this.detailStyle.height = "200px";				
			}else{
				this.detailStyle.width = "100%";
				this.detailStyle.height = "auto";				
			}
		
	  },
	  
  render: function() {
	
	var meal = this.props.details;

	var focused = null;
	
	if(this.state.liked){
		var focused = <DetailRecipe 
				functionList={this.listIt}
				meal={meal} 
				detailLeftStyle={this.detailLeftStyle} 
				detailRightStyle={this.detailRightStyle} 
				detailSecondaryStyle={this.detailSecondaryStyle} 
				commentBoxStyle={this.commentBoxStyle} 
				comments={this.state.comments}
				clickHandler={this.handleClick}
			/>;
			
	}else{
		
		var focused = <AdvertiseRecipe meal={meal} clickHandler={this.handleClick} />;

	}
	
    return (
			<div id={meal.id} style={this.detailStyle} draggable="true" onDragStart={this.dragStart} >

				{focused}

			</div>
    );
  }
});

var RecipeList = React.createClass({
	
	getInitialState: function() {
		return {
		  data: {"error":true,"meals":[]},
		  liked: false
		};
	  },
	
	recipeListStyle : {
		backgroundColor:""
	},
	  
	  componentDidMount: function() {
		$.ajax({
		  url: this.props.source,
		  dataType: 'json',
		  cache: false,
		  success: function(data) {
			this.setState({data: data});
		  }.bind(this),
		  error: function(xhr, status, err) {
			console.error(this.props.source, status, err.toString());
		  }.bind(this)
		});
	  },

  render: function() {
	  
	  var handleClick = this.handleClick;
	  
    return (
		<div>
			<div style={this.recipeListStyle} >
			
			    {
					this.state.data.meals.map(function(meal) {
						
						return 	<div key={meal.id}>
									<RecipeItem details={meal} />			
								</div>;
					})
				}
			
			</div>
			
		</div>
    );
  }
});

var RecipeBasket = React.createClass({
		
	miniMealStyle : {
		width:"100%"	
	},
  
  render: function() {
	
	var miniMealStyle = this.miniMealStyle;
	var day = this.props.day;
	var time = this.props.time;
    return (
	
       <div style={this.props.basketStyle} onDragOver={this.props.preventDefault} onDrop={this.props.drop} data={day + "," + time}>
			
			 {
					this.props.meals.map(function(meal) {
						
						return 	<div key={meal.id} style={miniMealStyle}  data={day + "," + time}>
									{meal.title}		
								</div>;
					})
				}
			
      </div>
    );
  }
});

var NutritionValue = React.createClass({

	nutritionStyle : {
		backgroundColor:""
	},
	comparisonStyle : {
		marginLeft:"20px",
		color:"red"
	},
	
	values : {
			"calories":{"title":"Calories","amount":2000, "unit":"kcal"},
			"fat":{"title":"Fat","amount":55, "unit":"g"},
			"saturatedfat":{"title":"Saturated Fat","amount":20, "unit":"g"},
			"transaturatedfat":{"title":"Transaturated Fat","amount":0, "unit":"g"},
			"cholesterol":{"title":"Cholesterol","amount":300, "unit":"mg"},
			"sodium":{"title":"Sodium","amount":2400, "unit":"mg"},
			"potassium":{"title":"Potassium","amount":3500, "unit":"mg"},
			"carbohydrates":{"title":"Carbohydrates","amount":300, "unit":"g"},
			"fiber":{"title":"Fiber","amount":25, "unit":"g"},
			"protein":{"title":"Protein","amount":50, "unit":"g"},
			"vitamina":{"title":" Vitamin A","amount":5000, "unit":"iu"},
			"vitaminc":{"title":"Vitamin C","amount":60, "unit":"mg"},
			"calcium":{"title":"Calcium","amount":1000, "unit":"mg"},
			"iron":{"title":"Iron","amount":18, "unit":"mg"},
			"vitamind":{"title":"Vitamin D","amount":400, "unit":"iu"},
			"vitamine":{"title":"Vitamin E","amount":30, "unit":"iu"},
			"vitamink":{"title":"Vitamin K","amount":80, "unit":"µg"},
			"thiamin":{"title":"Thiamin","amount":1.5, "unit":"mg"},
			"riboflavin":{"title":"Riboflavin","amount":1.7, "unit":"mg"},
			"niacin":{"title":"Niacin","amount":20, "unit":"mg"},
			"bitamin":{"title":"Bitamin","amount":2, "unit":"mg"},
			"folate":{"title":"Folate","amount":400, "unit":"µg"},
			"vitaminb12":{"title":"Vitamin B12","amount":6, "unit":"µg"},
			"biotin":{"title":"Biotin","amount":300, "unit":"µg"},
			"pantothenicacid":{"title":"Pantothenic Acid","amount":10, "unit":"mg"},
			"phosphorus":{"title":"Phosphorus","amount":1000, "unit":"mg"},
			"iodine":{"title":"iodine","amount":150, "unit":"µg"},
			"magnesium":{"title":"Magnesium","amount":400, "unit":"mg"},
			"zinc":{"title":"Zinc","amount":15, "unit":"mg"},
			"selenium":{"title":"Selenium","amount":70, "unit":"µg"},
			"copper":{"title":"Copper","amount":2, "unit":"mg"},
			"manganese":{"title":"Manganese","amount":2, "unit":"mg"},
			"chromium":{"title":"Chromium","amount":120, "unit":"µg"},
			"molybdenum":{"title":"Molybdenum","amount":75, "unit":"µg"},
			"chloride":{"title":"Chloride","amount":3400, "unit":"mg"},
			"sugar":{"title":"Sugar","amount":60, "unit":"g"}
	 },
	
  render: function() {
		var nutrient = this.props;
		
		var comparison = nutrient.amount/this.values[nutrient.kind].amount;
		comparison = comparison * 100;
		comparison = "(" +  Math.round(comparison) + "% )";
	  
    return (
		<div>
			<li>{this.values[nutrient.kind].title} ({this.values[nutrient.kind].unit}): {nutrient.amount} <span style={this.comparisonStyle} >{comparison}</span></li>
		</div>
    );
  }
});


var MealPlan = React.createClass({
	
	getInitialState: function() {
		
		return {
		  currentDragItem: null,
		  nutrients:[],
			
		  days: [
			
			{"title":"Saturday","times":[
				{"title":"Breakfast","meals":[]},
				{"title":"Lunch","meals":[]},
				{"title":"Supper","meals":[]},
				{"title":"Snack","meals":[]}
				]},
			{"title":"Sunday","times":[
				{"title":"Breakfast","meals":[]},
				{"title":"Lunch","meals":[]},
				{"title":"Supper","meals":[]},
				{"title":"Snack","meals":[]}
				]},
			{"title":"Monday","times":[
				{"title":"Breakfast","meals":[]},
				{"title":"Lunch","meals":[]},
				{"title":"Supper","meals":[]},
				{"title":"Snack","meals":[]}
				]},
			{"title":"Tuesday","times":[
				{"title":"Breakfast","meals":[]},
				{"title":"Lunch","meals":[]},
				{"title":"Supper","meals":[]},
				{"title":"Snack","meals":[]}
				]},
			{"title":"Wednesday","times":[
				{"title":"Breakfast","meals":[]},
				{"title":"Lunch","meals":[]},
				{"title":"Supper","meals":[]},
				{"title":"Snack","meals":[]}
				]},
			{"title":"Thursday","times":[
				{"title":"Breakfast","meals":[]},
				{"title":"Lunch","meals":[]},
				{"title":"Supper","meals":[]},
				{"title":"Snack","meals":[]}
				]},
			{"title":"Friday","times":[
				{"title":"Breakfast","meals":[]},
				{"title":"Lunch","meals":[]},
				{"title":"Supper","meals":[]},
				{"title":"Snack","meals":[]}
				]},
			
			]
		};
	  },
	
	
	  componentDidMount: function() {
		
		var fileName = 'mealplans/example.json';
		
		$.ajax({
		  url: fileName,
		  dataType: 'json',
		  cache: false,
		  success: function(cachedBasket) {
			  
			this.setState({days: cachedBasket});
		  }.bind(this),
		  error: function(xhr, status, err) {
			console.error(this.props.source, status, err.toString());
		  }.bind(this)
		});
		
	  },

	
	basketStyle : {
		padding:"10px",
		border:"none"
	},
	
	mealPlanStyle : {
		width:"100%"
	},
	columnStyle : {
		border:"dotted gray 2px"
	},
  	weekDayStyle : {
		textAlign:"center",
		fontWeight: "bold"
	},
	
	preventDefault: function (event) {
		event.preventDefault();
	  },
  
  	calculateNutrition: function (days) {
		
		var day = [];
		var x = 0;
		
		for(var d=0; d < days.length; d++){
			
			var dayOfWeek = days[d].title;
			
			day[dayOfWeek] = [];
			
			for(var t=0; t < days[d].times.length; t++){
				

				for(var m=0; m < days[d].times[t].meals.length; m++){
				
					day[dayOfWeek].push(days[d].times[t].meals[m]);
				
				}
				
			}
			
		}
		
		var nutrition = [];
		var dayNames = Object.keys(day);
		
		for(var wd = 0; wd<dayNames.length; wd++){
			
			nutrition[wd] = [];
		
			for(var m = 0; m<day[dayNames[wd]].length; m++){
				
				for(var n = 0; n<day[dayNames[wd]][m].nutrition.length; n++){
					
					var title = day[dayNames[wd]][m].nutrition[n].id;
					
					if(!nutrition[wd][title]){
						nutrition[wd][title] = 0;
					}
					nutrition[wd][title] = nutrition[wd][title] + day[dayNames[wd]][m].nutrition[n].amount;
				}
			
			}
			
		}

		return nutrition;
		
	  },
	
	saveToServer : function(data_from_plan){
		
		var json_data = JSON.stringify(data_from_plan);
		
		$.ajax({
		  url: "/api/v1/mealplan",
		  method: "post",
		  dataType: 'json',
		  data: {"data": json_data},
		  cache: false,
		  success: function(data) {			  
			this.setState({days:data_from_plan});
			console.log(data);
		  }.bind(this),
		  error: function(xhr, status, err) {
			console.error("/api/v1/mealplan", status, err.toString());
		  }.bind(this)
		});
		
	},
	
	 drop: function (event) {

		event.preventDefault();

		var data;

		try {
		  data = JSON.parse(event.dataTransfer.getData('text'));
		} catch (e) {
		  // If the text data isn't parsable we'll just ignore it.
		  return;
		}
		var dayTime = JSON.parse("[" + event.target.attributes.data.value + "]");
		var day = dayTime[0];
		var time = dayTime[1];
		
		// Do something with the data		
		
		var newState = this.state;
		newState.days[day].times[time].meals.push(JSON.parse(data));
		this.setState(newState);
		
		this.setState({nutrients:this.calculateNutrition(this.state.days)});
		
		this.saveToServer(this.state.days);
		
	  },
	
  render: function() {
	
	var weekDayStyle = this.weekDayStyle;
	var columnStyle = this.columnStyle;
	var basketStyle = this.basketStyle;
	var preventDefault = this.preventDefault;
	var drop = this.drop;
	var nutrition = this.state.nutrients;
	
    return (
		
		<table style={this.mealPlanStyle} >
		<thead>
				<tr>
					<td></td>
					<td>Breakfast</td>
					<td>Lunch</td>
					<td>Dinner</td>
					<td>Snack</td>
				</tr>
		</thead>
		<tbody>
			{this.state.days.map(function(day, i) {
				
				return <tr key={i}>
						
						<td width="100px" style={weekDayStyle}>{day.title}</td>
								
							{day.times.map(function(time,j) {
							
								return 	<td style={columnStyle} key={j}><RecipeBasket day={i} time={j} basketStyle={basketStyle} preventDefault={preventDefault} drop={drop} meals={time.meals}/></td>;
							})}
							
						<td style={weekDayStyle}><MiniNutrient data={nutrition[i]} /></td>
					</tr>;
				})}
			</tbody>
			<tfoot>
				<tr>
					<td>Calories:</td>
					<td>&nbsp;</td>
					<td>&nbsp;</td>
					<td>&nbsp;</td>
					<td>&nbsp;1</td>
				</tr>
			</tfoot>
			
      </table>
    );
  }
});

/*
*******************************************************************
*/
ReactDOM.render(
	<div>
		<MealPlan />		
		<RecipeList source="/api/v1/meals" />
		<RecipeForm />
	</div>,
document.getElementById('example')
);